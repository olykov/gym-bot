---
- name: Deploy application
  hosts: app
  become: yes
  vars:
    work_dir: /opt/gym-bot
  
  tasks:
    - name: Ensure home directory exists
      tags: ["app"]
      ansible.builtin.file:
        path: "{{ work_dir }}"
        state: directory
        mode: '0755'
      with_items:
        - "{{ work_dir }}"
        - "{{ work_dir }}/db_data"
    
    - name: Prepare environment variables
      tags: ["app", "env"]
      ansible.builtin.copy:
        dest: "{{ work_dir }}/.env"
        content: |
          BOT_IMAGE={{ lookup('env', 'BOT_IMAGE') }}
          BOT_TAG={{ lookup('env', 'BOT_TAG') }}
          FRONTEND_IMAGE={{ lookup('env', 'FRONTEND_IMAGE') }}
          FRONTEND_TAG={{ lookup('env', 'FRONTEND_TAG') }}
          GOOGLE_SHEET_ID={{ lookup('env', 'GOOGLE_SHEET_ID') }}
          TELEGRAM_BOT_TOKEN={{ lookup('env', 'TELEGRAM_BOT_TOKEN') }}
          NEXTAUTH_SECRET={{ lookup('env', 'NEXTAUTH_SECRET') }}
          NEXT_PUBLIC_TELEGRAM_BOT_USERNAME={{ lookup('env', 'NEXT_PUBLIC_TELEGRAM_BOT_USERNAME') }}
          DB_USER={{ lookup('env', 'DB_USER') }}
          DB_HOST={{ lookup('env', 'DB_HOST') }}
          DB_NAME={{ lookup('env', 'DB_NAME') }}
          DB_PASSWORD={{ lookup('env', 'DB_PASSWORD') }}
          DB_PORT={{ lookup('env', 'DB_PORT') }}
    
    - name: Prepare sa.json
      tags: ["app"]
      ansible.builtin.copy:
        dest: "{{ work_dir }}/sa.json"
        content: |
          {{ lookup('env', 'SA') }}
    
    - name: Ensure init.sql exists
      tags: ["app"]
      ansible.builtin.copy:
        src: "{{inventory_dir}}/../init.sql"
        dest: "{{ work_dir }}/init.sql"

    - name: Ensure docker-compose.yml is updated
      tags: ["app"]
      ansible.builtin.template:
        src: "{{inventory_dir}}/../docker-compose.yaml"
        dest: "{{ work_dir }}/docker-compose.yml"
      register: _docker_compose
    
    - name: Check container
      # when: _docker_compose is changed
      tags: ["app"]
      block:
        - name: Ensure app container is absent
          community.docker.docker_compose_v2:
            project_src: "{{ work_dir }}"
            state: absent

        - name: Ensure app container is running
          community.docker.docker_compose_v2:
            project_src: "{{ work_dir }}"
            pull: always
            state: present
          register: _docker_compose

